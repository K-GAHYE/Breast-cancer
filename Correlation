setwd('C://your_path')
.libPaths()
install.packages("corrplot")
install.packages("survival")
install.packages("Matrix")
install.packages("foreign")
install.packages("PerformanceAnalytics")
install.packages("xts")

library(PerformanceAnalytics)
library(survival)
library(Hmisc)
library(corrplot)
library(dplyr)
data1<-read.table("your_data.txt", header=T, sep="\t", na.strings = "NA", fill=T)
t.data1<-t(data1)
row.names(data1)<-as.vector(data1$data1)
data1<-data1[,2:26]
r.data1_matrix<-data.matrix(r.data1)

###rcorr function in Hmisc package detects significance levels for pearson and spearman correlations
res2<-rcorr(as.matrix(data1), type="pearson")

###Make_Function 
flattenCorrMatrix <- function(cormat, pmat) {
  ut <- upper.tri(cormat)
  data.frame(
    row = rownames(cormat)[row(cormat)[ut]],
    column = rownames(cormat)[col(cormat)[ut]],
    cor  =(cormat)[ut],
    p = pmat[ut]
    )
}
cormatrix<-flattenCorrMatrix(res2$r, res2$P)
write.table(cormatrix, "cormatrix_loset3.txt", sep="\t", row.names=F)

#pvalue arrange in increasing order and have only P < 0.05
S_cormatrix<-cormatrix%>%arrange(p)%>%filter(p<0.05)

gene<-as.vector(t(read.table("your_data.txt", header=T, sep="\t", na.strings = "NA", fill=T)))
drug<-as.vector(t(read.table("your_data.txt", header=T, sep="\t", na.strings = "NA", fill=T)))

SS_cormatrix<-S_cormatrix %>% filter (row %in% gene)
SSS_cormatrix<-SS_cormatrix %>% filter (column %in% drug)
write.table(SSS_cormatrix, "your_data.txt", sep="\t", row.names=F)


library(corrplot)
data10<-data1 %>% select(Gefitinib,Gemcitabine,X5.FU,Everolimus,paclitaxel,Irinotecan,GLYCOLYSIS,ZFHX3_c.2330TCp.Val777Ala,
ESTROGEN_RESPONSE_EARLY,BILE_ACID_METABOLISM,CHOLESTEROL_HOMEOSTASIS,BTG2_c.457GAp.Val153Met,PI3K_AKT_MTOR_SIGNALING,
IL2_STAT5_SIGNALING,SETD2_c.2283GAp.Met761Ile,PROTEIN_SECRETION,MLH1_c.1151TAp.Val384Asp,IL6_JAK_STAT3_SIGNALING,MYC_TARGETS_V2,
COMPLEMENT,INFLAMMATORY_RESPONSE,KRAS_SIGNALING_UP,COAGULATION,WNT_BETA_CATENIN_SIGNALING,UV_RESPONSE_DN,FATTY_ACID_METABOLISM,MYOGENESIS)
res1<-cor(as.matrix(data10, use="pairwise.complete.obs"))
corrplot(res1, method="circle")
corrplot(res1, method="square", type="upper")
corrplot(res1, method="number")
corrplot(res1, method="color")
corrplot(res1,method="square", type="upper", order="hclust",addrect=5)
corrplot(res2, p.mat = res2[[1]], order = "hclust", insig = "pch", addrect = 3)
dev.copy(tiff,"your_data.tiff",width=12, height=12, units="in",res=200) 
dev.off() 

cor.mtest <- function(mat, conf.level = 0.95) {
    mat <- as.matrix(mat)
    n <- ncol(mat)
    p.mat <- lowCI.mat <- uppCI.mat <- matrix(NA, n, n)
    diag(p.mat) <- 0
    diag(lowCI.mat) <- diag(uppCI.mat) <- 1
    for (i in 1:(n - 1)) {
        for (j in (i + 1):n) {
            tmp <- cor.test(mat[, i], mat[, j], conf.level = conf.level)
            p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
            lowCI.mat[i, j] <- lowCI.mat[j, i] <- tmp$conf.int[1]
            uppCI.mat[i, j] <- uppCI.mat[j, i] <- tmp$conf.int[2]
        }
    }
    return(list(p.mat, lowCI.mat, uppCI.mat))
}
mat<-as.matrix(data10)
res2 <- cor.mtest(mat, 0.95)
res2 <-as.matrix(res2)
dev.copy(tiff,"your_data.tiff",width=10, height=10, units="in",res=200) 
dev.off() 

# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
    mat <- as.matrix(mat)
    n <- ncol(mat)
    p.mat<- matrix(NA, n, n)
    diag(p.mat) <- 0
    for (i in 1:(n - 1)) {
        for (j in (i + 1):n) {
            tmp <- cor.test(mat[, i], mat[, j], ...)
            p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
        }
    }
  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
  p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(heteromanova[,1:40])
head(p.mat[, 1:5])


col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(res1, method="color", col=col(200),  
         type="upper", order="hclust", 
         tl.col="black", tl.srt=45, #Text label color and rotation
         # Combine with significance
         p.mat = p.mat, sig.level = 0.01, insig = "blank", 
         # hide correlation coefficient on the principal diagonal
         diag=FALSE 
         )

dev.copy(tiff,"your_data.tiff",width=12, height=12, units="in",res=200) 
dev.off() 


#############################################
corrplot2 <- function(data,
                      method = "pearson",
                      sig.level = 0.05,
                      order = "original",
                      diag = FALSE,
                      type = "upper",
                      tl.srt = 90,
                      number.font = 1,
                      number.cex = 1,
                      mar = c(0, 0, 0, 0)) {
  library(corrplot)
  data_incomplete <- data
  data <- data[complete.cases(data), ]
  mat <- cor(data, method = method)
  cor.mtest <- function(mat, method) {
    mat <- as.matrix(mat)
    n <- ncol(mat)
    p.mat <- matrix(NA, n, n)
    diag(p.mat) <- 0
    for (i in 1:(n - 1)) {
      for (j in (i + 1):n) {
        tmp <- cor.test(mat[, i], mat[, j], method = method)
        p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
      }
    }
    colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
    p.mat
  }
  p.mat <- cor.mtest(data, method = method)
  col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
  corrplot(mat,
    method = "color", col = col(200), number.font = number.font,
    mar = mar, number.cex = number.cex,
    type = type, order = order,
    addCoef.col = "black", # add correlation coefficient
    tl.col = "black", tl.srt = tl.srt, # rotation of text labels
    # combine with significance level
    p.mat = p.mat, sig.level = sig.level, insig = "blank",
    # hide correlation coefficients on the diagonal
    diag = diag
  )
}

corrplot(
  data = data1,
  method = "pearson",
  sig.level = 0.05,
  order = "original",
  diag = FALSE,
  type = "upper",
  tl.srt = 75
)
